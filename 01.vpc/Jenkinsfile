pipeline {
    agent {
		label "Agent-1"
	}
     environment { 
        COURSE = 'DEVOPS'
    }
    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    /* parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

        text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

        booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

        choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

        password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')

    } */

    stages {
        stage('init') {
            steps {
                script{
                    withAWS(credentials: 'AWS-auth', region: 'us-east-1') { // 'AWS-auth' is the ID of your AWS credentials in Jenkins
                        
                        sh """
                            cd 01.vpc
                            terraform init -reconfigure              
                        """
                    }
                }
            }
        }
        stage('plan') {
            steps {
                script{
                    withAWS(credentials: 'AWS-auth', region: 'us-east-1') { // 'AWS-auth' is the ID of your AWS credentials in Jenkins
                        
                        sh """
                            cd 01.vpc
                            terraform plan             
                        """
                    }
                }
            }
        }
        stage('apply') {
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                script{
                    withAWS(credentials: 'AWS-auth', region: 'us-east-1') { // 'AWS-auth' is the ID of your AWS credentials in Jenkins
                        
                        sh """
                            cd 01.vpc
                            terraform apply -auto-approve           
                        """
                    }
                }
            }
        }
        stage('Trigger Downstream Job - sg') {
                steps {
                    script {
                        build job: '10-sg', wait: false, propagate: false
                        // '10-sg' is the name of the downstream job.
                        // 'wait: false' ensures 01-vpc will not wait for 10-sg to complete.
                        // 'propagate: false' ensures 01-vpc's status will not reflect 10-sg's status.
                    }
                }
            }

    }
    
    post {
         always { 
            echo 'I will always say Hello again!'
            deleteDir()
        }

        success {
            echo "This build is completed successfully"
        }
        failure { 
            echo 'Hello Failure'
        }
    }
}